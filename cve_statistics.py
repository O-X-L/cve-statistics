#!/usr/bin/env python3

# schema: https://cveproject.github.io/cve-schema/schema/docs/
# download: https://www.cve.org/Downloads

from os import listdir
from pathlib import Path
from json import loads as json_loads
from json import dumps as json_dumps

DUMP_DIR = 'cvelistV5-main/cves'
OUT_FILE = 'cve_statistics.json'
SHRINK = False  # remove data you might not need
INDENT = None  # JSON indentation

stats = {}


def _score_to_severity(score: float):
    if score < 5:
        return 'low'

    if score < 7.5:
        return 'med'

    if score < 9:
        return 'high'

    if score < 9.8:
        return 'crit'

    return 'dis'


years = listdir(DUMP_DIR)
years.sort()

for year in years:
    if not Path(f"{DUMP_DIR}/{year}").is_dir():
        continue

    stats[year] = {
        'count': 0,
        'count_severity': {'low': 0, 'med': 0, 'high': 0, 'crit': 0, 'dis': 0},
        'scores': {},
        'score_avg': 0,
    }

    for batch in listdir(f"{DUMP_DIR}/{year}"):
        for cve in listdir(f"{DUMP_DIR}/{year}/{batch}"):
            try:
                with open(f"{DUMP_DIR}/{year}/{batch}/{cve}", 'r', encoding='utf-8') as _file:
                    cve_data = json_loads(_file.read())
                    metrics = cve_data['containers']['cna']['metrics'][0]
                    if cve_data['cveMetadata']['state'] != 'PUBLISHED':
                        continue

                    stats[year]['count'] += 1
                    cve_id = cve_data['cveMetadata']['cveId']

                for value in metrics.values():
                    score = value['baseScore']
                    stats[year]['scores'][cve_id] = score
                    stats[year]['count_severity'][_score_to_severity(score)] += 1

            except (IndexError, KeyError, TypeError) as e:
                pass

    year_scored = len(stats[year]['scores'])
    info = f"{year} | Published: {stats[year]['count']} | Scored: {year_scored} | Severity: {stats[year]['count_severity']}"
    if stats[year]['count'] != 0:
        info += f" | %-Scored: {round((100 / stats[year]['count']) * year_scored, 2)}"

        if year_scored != 0:
            stats[year]['score_avg'] = round(sum(stats[year]['scores'].values()) / year_scored, 2)
            info += f" | Avg score: {stats[year]['score_avg']}"

    print(info)
    if SHRINK:
        stats[year].pop('scores')


with open(OUT_FILE, 'w', encoding='utf-8') as _file:
    _file.write(json_dumps(stats, indent=INDENT))
